openapi: 3.0.0
info:
  description: |-
    This is the Rest API Documentation for the SLT live kit  platform developed by BigZkoop (PVT) LTD.
    Backend Server: https://livekit.bigzkoop.com   

    Find the Design Document here :
    https://drive.google.com/=sharing

  version: 1.0.0
  title: SLT LiveKit
  termsOfService: https://livekit.bigzkoop.com/
  contact:
    email: contact@bigzkoop.com
# host: petstore.swagger.io
# basePath: /v2
tags:
- name: Health Check
  description: Api About Check Syatem Health
- name: Room Service
  description: Api About Rooms
- name: Participants Service
  description: Api About Participants
# - name: Category
#   description: Category of Item
# - name: Customer
#   description: Customer Registration
# schemes:
# - http
paths:
  /:
    get:
      tags:
      - Health Check
      summary: Health Check
      description: This api is used to  Check Syatem Health
      operationId: checkHealth
      produces:
      - application/json
      - application/xml
      responses:
        200:
          description: Room created
  /api/v1/room/create-room:
    post:
      tags:
      - Room Service
      summary: Create Room
      description: This api is used to create new room
      operationId: createRoom
      produces:
      - application/json
      - application/xml
      parameters:
      - in: body
        name: body
        description: Created Room object
        required: true
        schema:
          $ref: '#/definitions/Room'
      responses:
        200:
          description: Room created
  /api/v1/room/list-room:
    get:
      tags:
      - Room Service
      summary: Get All Room
      description: This api is used to get all rooms
      operationId: listRoom
      produces:
      - application/json
      - application/xml
      parameters:
      - in: body
        name: body
        description: Get All Room object
        required: true
        schema:
          $ref: '#/definitions/Room'
      responses:
        200:
          description:
  /api/v1/room/delete/{roomId}:
    delete:
      tags:
      - Room Service
      summary: End meeting
      description: This api is used to delete rooms / End Meeting
      operationId: deleteRoom
      produces:
      - application/json
      - application/xml
      parameters:
      - name: roomID
        in: path
        description: Room Id of the user who is calling this API endpoint
        required: true
      responses:
        200:
          description: Room deleted
          
  /api/v1/participants/join:
    post:
      tags:
      -  Participants Service
      summary: Join new room
      description: This api is used to join a room
      operationId: joinRoom
      parameters:
      - name: roomName 
        in: query
        type: string
        description: Name of room This is required for the joining
        required: true
      - name: body
        in: body
        schema:
          $ref: '#/definitions/Participants'
      responses:
        200:
          description: Join successful
  /api/v1/participants/all/{room}:
    get:
      tags:
      -  Participants Service
      summary: Get All Participants By Room
      description: This api is used to get all Participants In specific room
      operationId: getAllParticipants
      parameters:
      - name: room 
        in: query
        type: string
        description: Name of room This is required for the get all participants in specific room
        required: true
      responses:
        200:
          description: Join successful
  #   delete:
  #     tags:
  #     - Category
  #     summary: Delete Category
  #     description: This can only be done by the logged in user.
  #     operationId: deleteCategory
  #     parameters:
  #     - name: tenant-id
  #       in: path
  #       description: Tenant ID of the user who is calling this API endpoint
  #       required: true
  #     - name: id
  #       in: path
  #       description: ID of the category
  #       required: true
  #     responses:
  #       200:
  #         description: OK
  #   get:
  #     tags: 
  #     - Category
  #     summary: Get single category
  #     description: This can only be done by the logged in user.
  #     operationId: getSingleCategory
  #     parameters:
  #     - name: tenant-id
  #       in: path
  #       description: Tenant ID of the user who is calling this API endpoint
  #       required: true
  #     - name: id
  #       in: path
  #       description: ID of the category
  #       required: true
  #     responses:
  #       200:
  #         description: OK
  #         schema:
  #           $ref: '#/definitions/Category'
  # /{tenent-id}/category/all:
  #   get:
  #     tags:
  #     - Category
  #     summary: Get all category
  #     description: This can only be done by the logged in user.
  #     operationId: getAllCategory
  #     parameters:
  #     - name: query
  #       in: path
  #       description: Search string for this endpoint (Default empty string)
  #       required: false
  #     - name: tenant-id
  #       in: path
  #       description: Tenant ID of the user who is calling this API endpoint
  #       required: true
  #     responses:
  #       200:
  #         description: OK
  #         schema:
  #           $ref: '#/definitions/Category'
            
  # /{tenent-id}/customer/:
  #   post:
  #     tags:
  #     - Customer
  #     summary: Add Customer
  #     description: Add Customer for shop
  #     operationId: addCustomer
  #     produces:
  #     - application/json
  #     - application/xml
  #     parameters:
  #     - in: body
  #       name: body
  #       description: Customer object that needs to be added to the store
  #       required: true
  #       schema:
  #         $ref: '#/definitions/Customer'
  #     responses:
  #       200:
  #         description: OK
          
  # /{tenent-id}/customer/{id}:
  #   patch:
  #     tags:
  #     - Customer
  #     summary: Update Customer
  #     description: Update Customer
  #     operationId: updateCustomer
  #     parameters:
  #     - name: tenant-id
  #       in: path
  #       type: string
  #       description: Tenant ID of the user who is calling this API endpoint
  #       required: true
  #     - name: id
  #       type: string
  #       in: path
  #       description:  ID of the Customer
  #       required: true
  #     - name: name
  #       type: string
  #       in: path
  #       description:  ID of the Customer
  #       required: false
  #     - name: dob
  #       type: string
  #       in: path
  #       description:  ID of the Customer
  #       required: false
  #     - name: address
  #       type: string
  #       in: path
  #       description:  ID of the Customer
  #       required: false
  #     - name: nic
  #       type: string
  #       in: path
  #       description:  ID of the Customer
  #       required: false
  #     - name: phone_number
  #       type: string
  #       in: path
  #       description:  ID of the Customer
  #       required: false
  #     - name: gender
  #       type: string
  #       in: path
  #       description:  ID of the Customer
  #       required: false
  #     responses:
  #       200:
  #         description: OK
  #         schema:
  #           $ref: '#/definitions/Customer'
  #   delete:
  #     tags:
  #     - Customer
  #     summary: Delete Customer
  #     description: Delete Customer
  #     operationId: deleteCustomer
  #     parameters:
  #     - name: tenant-id
  #       in: path
  #       type: string
  #       description: Tenant ID of the user who is calling this API endpoint
  #       required: true
  #     - name: id
  #       type: string
  #       in: path
  #       description:  ID of the Customer
  #       required: true
  #     responses:
  #       200:
  #         description: OK
          
  # /{tenent-id}/customer/all:
  #   get:
  #     tags:
  #     - Customer
  #     summary: Get all customers
  #     description: Get all customers
  #     operationId: getAllCustomer
  #     parameters:
  #     - name: query
  #       in: path
  #       description: Search string for this endpoint (Default empty string)
  #       required: false
  #     - name: tenant-id
  #       in: path
  #       description: Tenant ID of the user who is calling this API endpoint
  #       required: true
  #     responses:
  #       200:
  #         description: OK
  #         schema:
  #           $ref: '#/definitions/Customer'
    
  # /{tenent-id}/order:
  #   post:
  #     tags:
  #     - Order
  #     summary: Post Order
  #     description: Post Order
  #     operationId: postOrder
  #     produces:
  #     - application/json
  #     - application/xml
  #     parameters:
  #     - name: tenant-id
  #       in: path
  #       description: Tenant ID of the user who is calling this API endpoint
  #       required: true
  #     - in: body
  #       name: body
  #       description: Created Category object
  #       required: true
  #       schema:
  #         $ref: '#/definitions/Order'
      
  #     responses:
  #       200:
  #         description: OK
          
  # /{tenent-id}/order/{id}:
  #   patch:
  #     tags:
  #     - Order
  #     summary: Update Order
  #     description: Update Order
  #     operationId: updateOrder
  #     consumes:
  #     - multipart/form-data
  #     - multipart/form-data
  #     produces:
  #     - application/json
  #     - application/xml
  #     parameters:
  #     - name: tenant-id
  #       in: path
  #       type: string
  #       description: Tenant ID of the user who is calling this API endpoint
  #       required: true
  #     - name: id
  #       in: path
  #       type: string
  #       description: ID of the Order
  #       required: true
  #     - name: order_date
  #       in: path
  #       type: string
  #       description: Order Date
  #       required: true
  #     - name: item_id
  #       in: path
  #       type: string
  #       description: ID of the Item
  #       required: true
  #     - name: customer_id
  #       in: path
  #       type: string
  #       description: ID of the Customer 
  #       required: false
  #     - name: total_amount
  #       in: path
  #       description: Totle Amoune
  #       required: true
  #       type: integer
  #     - name: status
  #       in: path
  #       description: Status of the Order
  #       required: true
  #       type: string
  #     - name: total_qty
  #       in: path
  #       type: integer
  #       description: total_qty of the order
  #       required: tru
  #     - name: unit_price
  #       in: path
  #       type: integer
  #       description: unit_price of the order
  #       required: true
  #     responses:
  #       200:
  #         description: OK
          
  #   delete:
  #     tags:
  #     - Order
  #     summary: Delete Order 
  #     description: Delete Order 
  #     parameters:
  #     - name: tenant-id
  #       in: path
  #       description: Tenant ID of the user who is calling this API endpoint
  #       required: true
  #     - name: id
  #       in: path
  #       description: ID of the category
  #       required: true
  #     responses:
  #       200:
  #         description: OK
    
          
  # /{tenent-id}/order/all:
  # get:
  #   tags:
  #   - Order
  #   summary: Get all Order
  #   description: Get all Order
  #   parameters:
  #     - name: tenant-id
  #       in: path
  #       description: Tenant ID of the user who is calling this API endpoint
  #       required: true
  #     - name: query
  #       in: query
  #       type: string
  #       description: Search string for this endpoint (Default empty string)
  #       required: false
  #       default: Latest trends
  #     - name: sortBy 
  #       in: query
  #       type: string
  #       description: Sort by parameter with sorting order. Can be any field of the returning list of items. Prefix "-" to sort descending order and "+" to ascending order.                  The example will sort the items in ascending order by name.
  #       required: true
  #       default: +name
  #     - name: page
  #       in: query
  #       type: integer
  #       description: Returning page number after applying pagination
  #       required: false
  #       default: 1
  #     - name: limit
  #       in: query
  #       type: integer
  #       description: Number of items to fit in a single page. If this is -1 all the items will be returned without pagination.
  #       required: false
  #       default: 10
  #     - name: filter
  #       in: query
  #       type: string
  #       description: |
  #       Filter the results. Use as <field-name> <operator> <value>. You can provide multiple
  #       filters by separating them with commas as in example.  The given example will query the
  #       items which are not archived and its name field is equal to Udara or Lochana.
         
  #       * eq: Check items equality to
  #       * neq: Check items not equality to
  #       * lt: Check items less than
  #       * gt: Check items greater than
  #       * in: Check items which are in
  #       * nin: Check items which are not in
  #       required: false
  #       default: archived eq false,name in Kumara Mahela
  #   responses:
  #     200:
  #       description: OK
  #       schema:
  #           $ref: '#/definitions/Order'
   
  
    
  
securityDefinitions:
  petstore_auth:
    type: oauth2
    authorizationUrl: http://petstore.swagger.io/oauth/dialog
    flow: implicit
    scopes:
      write:pets: modify pets in your account
      read:pets: read your pets
  api_key:
    type: apiKey
    name: api_key
    in: header
definitions:
  Room:
    type: object
    properties:
      roomName:
        type: string
      userName:
        type: string
    xml:
      name: Room
      
  Participants:
    type: object
    properties:
      userName:
        type: string
    xml:
      name: Participants
      
      
# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
basePath: /BigZkoop6/bg-pos-master/1.0.0
schemes:
 - https
 - http
servers:
  # Added by API Auto Mocking Plugin
  # Added by API Auto Mocking Plugin
  # Added by API Auto Mocking Plugin
  # Added by API Auto Mocking Plugin
  # Added by API Auto Mocking Plugin
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/adminbigzkoop/Lievkit_API/1.0.0
  - description: Server URL
    url: https://livekit.bigzkoop.com/
externalDocs:
  description: "Find out more about "
  url: "#"
